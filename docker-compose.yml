version: "3.8"

services:
  # Banco de Dados para o Serviço de Agendamento
  db-agendamento:
    image: mysql:8.0
    container_name: db-agendamento
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h localhost -u${MYSQL_USER} -p${MYSQL_PASSWORD} --silent" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      MYSQL_DATABASE: agendamento_db
      MYSQL_USER: agendamento_user
      MYSQL_PASSWORD: secure_password_agendamento
      MYSQL_ROOT_PASSWORD: secure_root_password_agendamento
    ports:
      - "3306:3306" # Porta mapeada corretamente externa:interna dentro da maquina docker
    volumes:
      - db_data_agendamento:/var/lib/mysql
    networks:
      - hospital-net

  mysql-notificacao:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: notificacao_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3307:3307"
    volumes:
      - mysql-notificacao-data:/var/lib/mysql
    networks:
      - hospital-net

  # Zookeeper para o Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - hospital-net
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    hostname: kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,INTERNAL://${HOST_IP:-localhost}:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      hospital-net:
        aliases:
          - kafka
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092"]
      interval: 10s
      timeout: 10s
      retries: 10

  # Microsserviço de Agendamento
  agendamento-service:
    build:
      context: ./agendamento-service
      dockerfile: Dockerfile
    container_name: agendamento-service
    restart: on-failure
    depends_on:
      db-agendamento:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST_AGENDAMENTO: db-agendamento
      DB_NAME_AGENDAMENTO: agendamento_db
      DB_USER_AGENDAMENTO: agendamento_user
      DB_PASSWORD_AGENDAMENTO: secure_password_agendamento
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_FLYWAY_LOCATIONS: classpath:db/migration
    networks:
      - hospital-net

  notificacao-service:
    build:
      context: ./notificacao-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-notificacao:3307/notificacao_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_MAIL_HOST: smtp.gmail.com
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_USERNAME: seu-email@gmail.com
      SPRING_MAIL_PASSWORD: sua-senha-de-app
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: true
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: true
    depends_on:
      - mysql-notificacao
      - kafka
      - agendamento-service
    networks:
      - hospital-net

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_CONNECT: "kafka:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka
    networks:
      - hospital-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3

volumes:
  db_data_agendamento:
  db_data_historico:
  mysql-notificacao-data:
networks:
  hospital-net:
    driver: bridge
    name: hospital-net
    attachable: true